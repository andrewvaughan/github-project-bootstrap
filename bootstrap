#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Bootstrap a GitHub project.

Provides assistance in setting up a GitHub repository from scratch to follow personal standards.  This script is
intended to be used for projects by Andrew Vaughan, but can be easily forked and modified to suit any needs.

For more information, see the `project readme <https://github.com/andrewvaughan/github-project-bootstrap>`_.

.. note::

   This script is intended to be run in bash.  The release-candidate branch's most recent commit can be run with the
   following command:

   ``curl -s https://raw.githubusercontent.com/andrewvaughan/github-project-bootstrap/master/bootstrap | bash -h``

   Note that python 2.7 and pip must be installed for this to function.  See the project readme for more information.

.. moduleauthor:: Andrew Vaughan <hello@andrewvaughan.io>
.. versionadded:: 0.1.0
"""

import argparse
import importlib
import getpass
import logging
import os
import sys


# Project Details
__version__ = '0.1.0'
__status__ = 'Production'

__copyright__ = 'Copyright 2018, Andrew Vaughan'
__license__ = 'MIT'
__docformat__ = 'reStructuredText'

__author__ = 'Andrew Vaughan'
__maintainer__ = 'Andrew Vaughan'
__email__ = 'hello@andrewvaughan.io'
__credits__ = [
    'Andrew Vaughan'
]


COLORS = {
    'ltred'    : 'ffdddd',
    'red'      : 'ff7474',

    'orange'   : 'ffb16f',

    'ltyellow' : 'fff6cc',
    'yellow'   : 'ffe67c',

    'ltblue'   : 'dfefff',
    'blue'     : '8fe1e7',

    'purple'   : 'cfaef2',

    'ltgreen'  : 'ddffd7',
    'green'    : 'aaffc7',

    'ltgrey'   : 'dddddd',
    'dkgrey'   : '555555',
    'black'    : '000000',

    'magenta'  : 'ff00ff'
}


# Our standards for projects
GITHUB_LABELS = {

    # REQUESTS
    'Request: Bug Fix': {
        'color' : COLORS['ltred'],
        'desc'  : 'Report of an unintended outcome, experience, or issue with the platform.'
    },

    'Request: DevOps': {
        'color' : COLORS['ltblue'],
        'desc'  : 'Request for an update to dependencies or other operational requirements.'
    },

    'Request: Documentation': {
        'color' : COLORS['ltyellow'],
        'desc'  : 'Request for updated or new documentation or documentation tools for the project.'
    },

    'Request: Feature': {
        'color' : COLORS['ltgreen'],
        'desc'  : 'Request for a new feature or enhancement to existing functionality.'
    },

    'Request: Support': {
        'color' : COLORS['ltgrey'],
        'desc'  : 'Request for support in installing or using the product.'
    },


    # PRIORITY
    'Priority: 01-Critical': {
        'color' : COLORS['red'],
        'desc'  : 'A critical issue or incident that impacts revenue. 24/7 priority and released as hot-fix.'
    },

    'Priority: 02-High': {
        'color' : COLORS['orange'],
        'desc'  : 'A severe issue or incident that impacts many users. Top priority and released as hot-fix.'
    },

    'Priority: 03-Normal': {
        'color' : COLORS['yellow'],
        'desc'  : 'A standard request that will be processed as part of the project\'s normal lifecycle.'
    },

    'Priority: 04-Low': {
        'color' : COLORS['blue'],
        'desc'  : 'Will be addressed when all priorities "Normal" and above are completed.'
    },

    'Priority: 05-Trivial': {
        'color' : COLORS['purple'],
        'desc'  : 'Will be addressed when all priorities "Low" and above are completed.'
    },


    # STATUS
    'Status: 01-Pending Initiation': {
        'color' : COLORS['ltgrey'],
        'desc'  : 'This change has been approved by the code owners and is awaiting development.'
    },

    'Status: 02-In Progress': {
        'color' : COLORS['ltgreen'],
        'desc'  : 'Issue is actively being developed by a contributor.'
    },

    'Status: 03-Code Review': {
        'color' : COLORS['green'],
        'desc'  : 'Issue is being reviewed for approval by core contributors.'
    },

    'Status: 04-Pending Staging': {
        'color' : COLORS['blue'],
        'desc'  : 'Issue has been compeleted, passed review, and is now awaiting deployment to staging.'
    },

    'Status: 05-Staged': {
        'color' : COLORS['dkgrey'],
        'desc'  : 'The development has been accepted by a project maintainer and merged into the develop branch.'
    },

    'Status: 06-Released': {
        'color' : COLORS['black'],
        'desc'  : 'This has been released on production. The issue is closed.'
    },

    'Status: On Hold': {
        'color' : COLORS['orange'],
        'desc'  : 'A project maintainer has placed a temporary hold on development. See issue for details.'
    },

    'Status: Need More Info': {
        'color' : COLORS['orange'],
        'desc'  : 'More information is required from the reporter for action to continue.'
    },


    # TYPE
    'Type: Feature': {
        'color' : COLORS['green'],
        'desc'  : 'A new feature or enhancement to existing functionality.'
    },

    'Type: Bug': {
        'color' : COLORS['red'],
        'desc'  : 'An unintended outcome, experience, or issue with the platform.'
    },

    'Type: Documentation': {
        'color' : COLORS['yellow'],
        'desc'  : 'Updated or new documentation or documentation tools for the project.'
    },

    'Type: DevOps': {
        'color' : COLORS['blue'],
        'desc'  : 'An update to dependencies or other operational requirements.'
    },

    'Type: Release': {
        'color' : COLORS['black'],
        'desc'  : 'A versioned release of the project.'
    },


    # WONTFIX

    'Wontfix: Duplicate': {
        'color' : COLORS['dkgrey'],
        'desc'  : 'This issue is a duplicate of another issue. See issue for details.'
    },

    'Wontfix: Invalid': {
        'color' : COLORS['dkgrey'],
        'desc'  : 'This issue is invalid or inappropriate. See issue for details.'
    },


    # MISCELLANEOUS
    'New Issue': {
        'color' : COLORS['magenta'],
        'desc'  : 'An unreviewed issue that needs to be sorted by repository owners.'
    }

}

GITHUB_MILESTONES = [
    'v0.1.0'
]

GITHUB_ISSUES = [
    {
        'title'     : 'Add git configuration files',
        'body'      : 'Add `.gitignore` and `.gitattributes` to prepare the repository.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add editor configuration file',
        'body'      : 'Add `.editorconfig` to control IDE spacing management.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add readme documentation',
        'body'      : 'Add a `README.md` file to document instructions, installation, usage details, contribution guidelines, and the license.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: Documentation'
        ]
    },

    {
        'title'     : 'Add license documentation',
        'body'      : 'Add a `LICENSE` file to document license for project.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: Documentation'
        ]
    },

    {
        'title'     : 'Add contributing documentation',
        'body'      : 'Add a `CONTRIBUTING.md` file to document contribution instructions and standards.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: Documentation'
        ]
    },

    {
        'title'     : 'Add code of conduct documentation',
        'body'      : 'Add a `CODE_OF_CONDUCT.md` file to document community standards.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: Documentation'
        ]
    },

    {
        'title'     : 'Add support documentation',
        'body'      : 'Add a `SUPPORT.md` file to document project support directions.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: Documentation'
        ]
    },

    {
        'title'     : 'Add GitHub issue templates',
        'body'      : 'Add templates for GitHub labels including Bug Report, Documentation Request, Feature Request, Maintenance Request, and Support Request.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add GitHub pull request template',
        'body'      : 'Add a template for GitHub for instructions when making a Pull Request.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Develop make and test tool',
        'body'      : 'Create a `Makefile` or similar to support building and testing.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add linting functionality',
        'body'      : 'Add functionality to lint code for standard compliance on test.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add a changelog generator',
        'body'      : 'Add functionality to generate a changelog for GitHub releases.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add Continuous Integration support',
        'body'      : 'Install functionality for continuous integration upon Pull Request. Must include code coverage reporting, documentation coverage (if supported), and dependency reporting (if supported).',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add unit and integration testing run commands',
        'body'      : 'Add support for unit testing and add controls within `Makefile` or similar script controller.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    },

    {
        'title'     : 'Add cleanup utility to scripts',
        'body'      : 'Support `make clean` or similar to clean up temporary or unwanted files from the repository.',
        'milestone' : 1,
        'labels'    : [
            'Priority: 03-Normal',
            'Status: 01-Pending Initiation',
            'Type: DevOps'
        ]
    }
]


# Add a verbose logging handler to the logging module
logging.PDEBUG = logging.DEBUG + 2
logging.addLevelName(logging.PDEBUG, "PDEBUG")

logging.PVERBOSE = logging.DEBUG + 1
logging.addLevelName(logging.PVERBOSE, "PVERBOSE")

logging.VERBOSE = 1
logging.addLevelName(logging.VERBOSE, "VERBOSE")


def log_PDEBUG(self, message, *args, **kws):
    """Log a project debug message.

    Args:
        self (Loggger): the logger calling this method
        message (str): the message to log

    Kwargs:
        args*: any arguments to use in the message template

    """
    if self.isEnabledFor(logging.PDEBUG):
        self._log(logging.PDEBUG, message, args, **kws)


def log_PVERBOSE(self, message, *args, **kws):
    """Log a project verbose message.

    Args:
        self (Loggger): the logger calling this method
        message (str): the message to log

    Kwargs:
        args*: any arguments to use in the message template

    """
    if self.isEnabledFor(logging.PVERBOSE):
        self._log(logging.PVERBOSE, message, args, **kws)


def log_verbose(self, message, *args, **kws):
    """Log a verbose message.

    Args:
        self (Loggger): the logger calling this method
        message (str): the message to log

    Kwargs:
        args*: any arguments to use in the message template

    """
    if self.isEnabledFor(logging.VERBOSE):
        self._log(logging.VERBOSE, message, args, **kws)


logging.Logger.p_debug = log_PDEBUG
logging.Logger.p_verbose = log_PVERBOSE
logging.Logger.verbose = log_verbose


def import_pip(module, pip_package):
    """Import, and install if necessary, a pip module.

    Attempts to import a module with pip.  If it doesn't exist, it installs it and then imports it.

    Args:
        module (str): the pip module to import

    """
    logger = logging.getLogger('pip')

    try:
        logger.p_debug('Attempting import of "%s" pip module', module)

        importlib.import_module(module)

        logger.p_verbose('Module "%s" imported successfully', module)

    except ImportError, e:
        logger.p_debug('Module "%s" not found, attempting to install from pip', pip_package)
        logger.p_verbose('Raised Error: %s', e)

        import subprocess

        process = subprocess.Popen(
            ["pip", "install", pip_package],
            shell=False,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        process.wait()

        logger.p_verbose('Module "%s" installed successfully; "%s" now imported', pip_package, module)


def ask(msg, options=None, default=None, secure=False, postfix=': '):
    """Ask for information from the user.

    Presents a prompt to the user for input.  The default value provided is used if a blank entry is received.  If
    secure is set, the input is hidden from the user (e.g., for passwords).

    Args:
        msg (str): the prompt text for the user; should not contain any formatting
        default (str): the default value for the text
        secure (bool): whether the input being asked for needs to be secured
        postfix (str): the string to put at the end of the prompt

    Returns:
        (str) the value entered, or the default provided

    """
    if options:
        msg = msg + ' ['

        for opt in options:
            if opt == default:
                msg = msg + opt.upper()
            else:
                msg = msg + opt.lower()

        msg = msg + '] '

    elif default:
        msg = msg + (' [%s] ' % default)

    msg = msg + postfix

    print ""

    while True:
        if secure:
            response = getpass.getpass(msg)
        else:
            response = raw_input(msg)

        if not options:
            break

        if response.lower() in options:
            break

        if response == "" and default:
            break

    print ""

    if not response and default:
        return default

    return response


def main(args):
    """Bootstrap a given GitHub project.

    This is the main function for this script, calling the GitHub API and running the user through various dialogs and
    options to configure their GitHub Repository.

    Args:
        args (dict): Any arguments passed from the command line.

    """
    logger = logging.getLogger('bootstrap')

    logger.info("GitHub Project Bootstrap v%s", __version__)
    logger.info('-' * 80)

    import_pip('github', 'pygithub')
    from github import Github, GithubException
    from github.GithubException import UnknownObjectException

    logger.p_debug('-' * 80)


    # If a token is provided, skip basic login
    if args.token:
        logger.info("GitHub token found")
        api = Github(args.token)

    else:
        logger.info('GitHub token not found; switching to basic login')

        username = ask('GitHub username', default='andrewvaughan')
        password = ask('GitHub password', secure=True)

        api = Github(username, password)


    gh_user = api.get_user()


    # If using an organization, prepend that
    repo_slug = ""
    if args.org != None:
        logger.info("Organization found: %s", args.org)
        repo_slug = args.org + "/"
    else:
        logger.info("User found: %s", gh_user.login)
        repo_slug = gh_user.login + "/"

    # Get repository slug
    if args.repo:
        logger.info("GitHub Repository: %s", args.repo)
        repo_slug = "%s%s" % (repo_slug, args.repo)

    else:
        repo_slug += ask('%s Repository' % ("Organization" if args.org else "User"), default=os.path.basename(os.getcwd()))


    # Load repository from GitHub
    try:
        logger.info('Attempting to load repository "%s" from GitHub', repo_slug)

        gh_repo = api.get_repo(repo_slug)

        logger.debug('Loaded successfully')

        # If the repo exists, see if there have been any commits to double-check with the user
        try:
            logger.p_debug('Checking if repository contains commits.')
            commits = gh_repo.get_commits().get_page(0)

            sanity_check = ask(
                'It seems as if this repository has commits - are you sure you wish to continue',
                options=['y', 'n'],
                default='n',
                postfix='? '
            )

            if sanity_check.lower() == 'n':
                logger.info('Nothing to do!  Goodbye.')
                exit(0)

        # The repository is empty, no need to do a sanity check
        except GithubException, e:
            logger.p_verbose('Error Raised: %s', e)

            if e.data['message'] == 'Git Repository is empty.':
                logger.p_verbose('Error expected, continuing.')
                pass

            else:
                logger.error('Unknown error.  Halting.')
                raise e


    # No repository was found under the provided name
    except UnknownObjectException, e:
        logger.p_verbose("Error Raised: %s", e)

        create = ask(
            'It seems that this is a new repository, would you like to create a new one',
            options=['y', 'n'],
            default='y',
            postfix='? '
        )

        if create.lower() == 'n':
            logger.info('Nothing to do!  Goodbye.')
            sys.exit(0)

        logger.p_debug("Creating repository '%s'", repo_slug)

        gh_repo = gh_user.create_repo(repo_slug)


    # Labels
    if args.skip_labels:
        logger.p_debug("Skipping Repository Labels")

    else:
        logger.p_debug("Setting up Repository Labels")

        if not args.defaults:
            confirm = ask(
                'Setup labels?  This will CLEAR any labels currently setup',
                options=['y', 'n'],
                default='y'
            )

        else:
            logger.p_debug("Defaults selected, continuing...")
            confirm = 'y'

        if confirm == 'n':
            logger.p_debug("Skipping Repository Labels")

        else:

            # Clear any existing labels
            logger.p_debug("Clearing existing labels...")

            labels = gh_repo.get_labels()

            for label in labels:
                logger.p_verbose("Deleting label '%s'", label)
                label.delete()

            # Add our label list
            logger.p_debug("Adding default labels...")

            for label, details in GITHUB_LABELS.iteritems():
                color = details['color']
                desc = details['desc']

                logger.p_verbose("Adding label '%s' with color '%s'", label, color)
                gh_repo.create_label(label, color, desc)

        logger.p_debug("Label configuration complete.");



    # Milestone
    if args.skip_milestones:
        logger.p_debug("Skipping Repository Milestones")

    else:
        logger.p_debug("Setting up Repository Milestones")

        if not args.defaults:
            confirm = ask(
                'Setup milestones?  This will CLEAR any milestones currently setup',
                options=['y', 'n'],
                default='y'
            )

        else:
            logger.p_debug("Defaults selected, continuing...")
            confirm = 'y'

        if confirm == 'n':
            logger.p_debug("Skipping Milestones")

        else:

            # Clear any existing milestones
            logger.p_debug("Clearing existing milestones...")

            milestones = gh_repo.get_milestones()

            for stone in milestones:
                logger.p_verbose("Deleting milestone '%s'", stone)
                stone.delete()

            # Add our milestone list
            logger.p_debug("Adding default milestones...")

            for stone in GITHUB_MILESTONES:
                logger.p_verbose("Adding milestone '%s'", stone)
                gh_repo.create_milestone(stone)

        logger.p_debug("Milestone generation complete.");


    # Common Issues
    if args.skip_issues:
        logger.p_debug("Skipping Common Issues")

    else:
        logger.p_debug("Setting up Common Issues")

        if not args.defaults:
            confirm = ask(
                'Setup common issues?  This may duplicate issues in your project, if any exist',
                options=['y', 'n'],
                default='y'
            )

        else:
            logger.p_debug("Defaults selected, continuing...")
            confirm = 'y'

        if confirm == 'n':
            logger.p_debug("Skipping Common Issues")

        else:

            # Add our milestone list
            logger.p_debug("Adding common issues...")

            for issue in GITHUB_ISSUES:

                logger.p_verbose("Adding milestone '%s'", issue['title'])

                gh_repo.create_issue(
                    title=issue['title'],
                    body=issue['body'],
                    milestone=gh_repo.get_milestone(issue['milestone']),
                    labels=issue['labels']
                )

        logger.p_debug("Common issue generation complete.");



# Call the main function if this file is directly run (as intended)
if __name__ == '__main__':
    PARSER = argparse.ArgumentParser(
        description='Sets up a GitHub repository to a standard.',
        epilog='This tool is designed and intended for use by Andrew Vaughan; however, it may be extended and used by anyone.'
    )

    PARSER.add_argument(
        '--version',
        action='version',
        version='GitHub Project Bootstrap v%s' % __version__
    )

    PARSER.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="increase debugging verbosity (-vvvv for max)"
    )

    PARSER.add_argument(
        "-t",
        "--token",
        help="GitHub token"
    )

    PARSER.add_argument(
        "-o",
        "--org",
        default=None,
        help="The organization to access instead of a user (default: None)"
    )

    PARSER.add_argument(
        "-r",
        "--repo",
        help="GitHub repository"
    )

    PARSER.add_argument(
        "-d",
        "--defaults",
        action="store_true",
        help="Applies all defaults to repository (skips questions)"
    )

    PARSER.add_argument(
        "--skip-labels",
        action="store_true",
        help="Skips setting up labels"
    )

    PARSER.add_argument(
        "--skip-milestones",
        action="store_true",
        help="Skips setting up milestones"
    )

    PARSER.add_argument(
        "--skip-issues",
        action="store_true",
        help="Skips creating common issues"
    )


    ARGS = PARSER.parse_args()

    LOG_ROOT = logging.getLogger()

    # Set the global logging level
    LOG_ROOT.setLevel(logging.INFO)
    if ARGS.verbose == 1:
        LOG_ROOT.setLevel(logging.PDEBUG)
    elif ARGS.verbose == 2:
        LOG_ROOT.setLevel(logging.PVERBOSE)
    elif ARGS.verbose == 3:
        LOG_ROOT.setLevel(logging.DEBUG)
    elif ARGS.verbose >= 4:
        LOG_ROOT.setLevel(logging.VERBOSE)

    # Add a console output handler to the log
    LOG_HANDLER = logging.StreamHandler(sys.stdout)

    LOG_HANDLER.setFormatter(
        logging.Formatter(
            fmt=u"%(name)10s :: [%(asctime)s] %(levelname)-8s %(message)s"
        )
    )

    LOG_ROOT.addHandler(LOG_HANDLER)

    # Bootstrap the project
    main(ARGS)
